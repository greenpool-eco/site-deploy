{"version":3,"sources":["webpack://@greenpool-eco/site/./src/components/modal/layout.tsx","webpack://@greenpool-eco/site/./src/pages/email-modal.tsx","webpack://@greenpool-eco/site/./src/pages/email-sender.tsx","webpack://@greenpool-eco/site/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://@greenpool-eco/site/./src/components/links/link-factory.tsx","webpack://@greenpool-eco/site/./src/components/links/link-entities.ts","webpack://@greenpool-eco/site/./src/components/links/telegram.tsx","webpack://@greenpool-eco/site/./src/images/main-page.png","webpack://@greenpool-eco/site/./src/pages/index.tsx"],"names":["Layout","backText","children","isOpen","container","isBrowser","document","body","onClose","ReactDOM","className","onClick","EmailModal","EmailSender","obj","TypeError","React","setIsOpen","handleOpen","handleClose","EmailInput","onConfirm","LinkFactory","entity","Component","component","target","href","link","linkEntities","telegram","Telegram","TelegramLink","t","useI18next","src","image","alt","Why","reasons","map","key","index"],"mappings":"6OAcaA,EAAgC,SAAC,GAMvC,IALLC,EAKI,EALJA,SACAC,EAII,EAJJA,SAII,IAHJC,cAGI,aAFJC,iBAEI,OAFQC,SAAcC,SAASC,KAAO,KAEtC,EADJC,EACI,EADJA,QAEA,OAAKL,GAAuB,MAAbC,EAIRK,eACL,uBAAKC,UAAW,uBACd,gBAAC,KAAD,CAAMA,UAAW,gBACdR,EACD,gBAAC,KAAD,CAAQS,QAASH,GAAUP,IAG7B,uBAAKS,UAAU,oCAEjBN,GAZO,MCbEQ,EAAwC,SAAC,GAAyB,IAAvBT,EAAsB,EAAtBA,OAAQK,EAAc,EAAdA,QAC9D,OACE,gBAAC,EAAD,CAAcP,SAAU,UAAWE,OAAQA,EAAQK,QAASA,GAC1D,uBAAKE,UAAU,iBACb,gBAAC,KAAD,MACA,sBAAIA,UAAW,wBAAf,WACA,sE,qHCTKG,EAA0C,SAAC,ICNzC,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDKyB,IAC9D,MAA4BC,YAAe,GAApCb,EAAP,KAAec,EAAf,KAEMC,EAAaF,eAAkB,WACnCC,GAAU,KACT,CAACA,IAEEE,EAAcH,eAAkB,WACpCC,GAAU,KACT,CAACA,IAEJ,OACE,gCACE,gBAAC,EAAAG,WAAD,CAAYC,UAAWH,IACvB,gBAAC,EAAAN,WAAD,CAAYT,OAAQA,EAAQK,QAASW,O,0IER9BG,EAAmC,SAAC,GAG1C,IAFLC,EAEI,EAFJA,OACWC,EACP,EADJC,UAEA,OACE,qBAAGC,OAAQ,SAAUC,KAAMJ,EAAOK,KAAMlB,UAAW,kBACjD,gBAACc,EAAD,CAAWD,OAAQA,MCVZM,EAAyB,CACpCC,SAAU,CACRF,KAAM,MCHGG,EAAoC,WAC/C,OACE,gBAACT,EAAD,CAAaC,OAAQM,EAAaC,SAAUL,UAAWO,KAMrDA,EAA4C,WAChD,OACE,wBAAMtB,UAAW,iBACf,gBAAC,KAAD,MADF,a,UCjBJ,EAAe,IAA0B,wD,UCsCzC,EA5BuC,WACrC,IAAQuB,GAAMC,gBAAW,QAAjBD,EAER,OACE,gCACE,2BAASvB,UAAU,8BACjB,uBAAKA,UAAU,aACb,uBAAKA,UAAU,uBACf,uBAAKA,UAAU,QACb,sBAAIA,UAAU,aAAauB,EAAE,eAC7B,sBAAIvB,UAAU,eAAeuB,EAAE,qBAE/B,gBAAC,EAAApB,YAAD,MAEA,qBAAGH,UAAU,eACX,4BAAOuB,EAAE,aAAT,KACA,gBAAC,EAAD,QAGJ,uBAAKE,IAAKC,EAAOC,IAAI,aAAa3B,UAAU,eAIhD,gBAAC4B,EAAD,QASOA,EAA0B,WACrC,IAAQL,GAAMC,gBAAW,QAAjBD,EAER,OACE,2BAASvB,UAAU,uBACjB,uBAAKA,UAAU,aACb,qCACA,uBAAKA,UAAU,WACZ6B,EAAQC,KAAI,SAACC,EAAKC,GAAN,OACX,gBAAC,KAAD,CAAMD,IAAKC,GACT,gCAAGT,EAAEQ,YASbF,EAAU,CAAC,SAAU,SAAU","file":"component---src-pages-index-tsx-c04b80cc0b74d3bb8b6e.js","sourcesContent":["import { Button, Card } from \"@greenpool-eco/components\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport \"./styles.scss\";\nimport { isBrowser } from \"utils/is-browser\";\n\ntype LayoutProps = {\n  backText: string;\n  isOpen?: boolean;\n  container?: Element;\n  onClose: () => void;\n};\n\nexport const Layout: React.FC<LayoutProps> = ({\n  backText,\n  children,\n  isOpen = true,\n  container = isBrowser() ? document.body : null,\n  onClose,\n}) => {\n  if (!isOpen || container == null) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(\n    <div className={\"modal modal_overlay\"}>\n      <Card className={\"modal__card \"}>\n        {children}\n        <Button onClick={onClose}>{backText}</Button>\n      </Card>\n\n      <div className=\"modal-background modal_overlay\" />\n    </div>,\n    container\n  );\n};\n","import * as Icons from \"components/icons\";\nimport * as Modal from \"components/modal\";\nimport * as React from \"react\";\n\ntype EmailModalProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const EmailModal: React.FC<EmailModalProps> = ({ isOpen, onClose }) => {\n  return (\n    <Modal.Layout backText={\"Go Back\"} isOpen={isOpen} onClose={onClose}>\n      <div className=\"success-modal\">\n        <Icons.Check />\n        <h3 className={\"success-modal__title\"}>Success</h3>\n        <p>A message has been sent to your email</p>\n      </div>\n    </Modal.Layout>\n  );\n};\n","import { EmailInput } from \"pages/email-input\";\nimport { EmailModal } from \"pages/email-modal\";\nimport * as React from \"react\";\n\ntype EmailSenderProps = {};\n\nexport const EmailSender: React.FC<EmailSenderProps> = ({}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  return (\n    <>\n      <EmailInput onConfirm={handleOpen} />\n      <EmailModal isOpen={isOpen} onClose={handleClose} />\n    </>\n  );\n};\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import { LinkEntity } from \"./link-entities\";\nimport * as React from \"react\";\n\ntype LinkProps = {\n  entity: LinkEntity;\n  component: React.FC<LinkComponent>;\n};\n\nexport type LinkComponent = {\n  entity: LinkEntity;\n};\n\nexport const LinkFactory: React.FC<LinkProps> = ({\n  entity,\n  component: Component,\n}) => {\n  return (\n    <a target={\"_blank\"} href={entity.link} className={\"link-container\"}>\n      <Component entity={entity} />\n    </a>\n  );\n};\n","export type ListType = {\n  [key: string]: LinkEntity;\n};\n\nexport type LinkEntity = {\n  link: string;\n};\n\nexport const linkEntities: ListType = {\n  telegram: {\n    link: \"#\",\n  },\n} as const;\n","import * as Icons from \"components/icons\";\nimport { LinkComponent, LinkFactory } from \"./link-factory\";\nimport { linkEntities } from \"./link-entities\";\nimport * as React from \"react\";\n\ntype TelegramProps = {};\n\nexport const Telegram: React.FC<TelegramProps> = () => {\n  return (\n    <LinkFactory entity={linkEntities.telegram} component={TelegramLink} />\n  );\n};\n\ntype TelegramLinkProps = {} & LinkComponent;\n\nconst TelegramLink: React.FC<TelegramLinkProps> = () => {\n  return (\n    <span className={\"telegram-link\"}>\n      <Icons.Telegram />\n      Telegram\n    </span>\n  );\n};\n","export default __webpack_public_path__ + \"static/main-page-1fefcce58c8e85a205735e9f59ad9ab9.png\";","import { Card } from \"@greenpool-eco/components\";\nimport * as Links from \"components/links\";\nimport { graphql, PageProps } from \"gatsby\";\nimport { useI18next } from \"gatsby-plugin-react-i18next\";\nimport image from \"images/main-page.png\";\nimport { EmailSender } from \"pages/email-sender\";\nimport * as React from \"react\";\n\nimport \"./styles.scss\";\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const { t } = useI18next(\"main\");\n  \n  return (\n    <>\n      <section className=\"section section-main panel\">\n        <div className=\"container\">\n          <div className=\"decor decor_double\" />\n          <div className=\"part\">\n            <h1 className=\"increased\">{t(\"info.title\")}</h1>\n            <h3 className=\"under-title\">{t(\"info.description\")}</h3>\n            \n            <EmailSender />\n            \n            <p className=\"write-to-us\">\n              <span>{t(\"info.link\")}:</span>\n              <Links.Telegram />\n            </p>\n          </div>\n          <img src={image} alt=\"Main image\" className=\"main-img\" />\n        </div>\n      </section>\n    \n      <Why />\n    </>\n  );\n};\n\nexport default IndexPage;\n\ntype WhyProps = {};\n\nexport const Why: React.FC<WhyProps> = () => {\n  const { t } = useI18next(\"main\");\n  \n  return (\n    <section className=\"section section-why\">\n      <div className=\"container\">\n        <h2>Why us?</h2>\n        <div className=\"reasons\">\n          {reasons.map((key, index) => (\n            <Card key={index}>\n              <>{t(key)}</>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nconst reasons = [\"card.0\", \"card.1\", \"card.2\"];\n\nexport const query = graphql`\n    query ($language: String!) {\n        locales: allLocale(filter: { language: { eq: $language } }) {\n            edges {\n                node {\n                    ns\n                    data\n                    language\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}